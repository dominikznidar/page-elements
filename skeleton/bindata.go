// Code generated by go-bindata.
// sources:
// templates/template.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesTemplateHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\xdb\x72\xdb\x36\x13\xbe\xd7\x53\xec\xcf\xdc\xfc\x4d\x4b\xd1\x72\x94\xda\x65\x28\x4d\x33\xa9\x66\xea\x99\xba\xc9\xd8\xea\x03\x80\xe4\x8a\x44\x4d\x1c\x06\x58\xca\x72\x3c\x7e\xf7\x0e\x08\x1d\x28\x1e\xd4\x8b\x52\x17\x22\x77\xb1\xd8\x6f\xbf\x3d\x00\xc9\xff\x72\x95\xd1\x8b\x46\x28\x49\x54\xcb\x49\xe2\xfe\xa0\x62\xb2\x58\x04\x28\x03\x27\x40\x96\x2f\x27\x00\x00\x89\x40\x62\x90\x95\xcc\x58\xa4\x45\x50\xd3\x26\xbc\x0d\x96\x13\xaf\x23\x4e\x15\x2e\xc3\x70\x7d\xb7\xfe\x63\x15\x86\x49\xe4\x05\x2d\x43\xc9\x04\x2e\x82\x1c\x6d\x66\xb8\x26\xae\x64\x00\x99\x92\x84\x92\x16\x41\x18\xde\xaf\xd6\x9f\xc3\xdf\x56\x8f\x5f\x1e\xee\xbe\xad\xef\xbe\xfe\x19\x86\x41\xdf\x98\xd5\x54\x2a\xd3\xb7\xfb\xfc\xd7\xfa\xf7\xaf\x0f\x8d\x89\xb7\xa9\xb8\x7c\x02\x83\xd5\x22\xb0\xf4\x52\xa1\x2d\x11\x29\x80\xd2\xe0\x66\x11\x94\x44\x3a\x8e\xa2\x02\x29\x55\x8a\x2c\x19\xa6\xa7\x99\x12\x51\xce\x2d\x45\x99\xb5\xd1\x49\x2c\xb8\x9c\x66\xd6\x1e\x90\x34\x7b\xf9\x77\xf7\x44\xef\xe1\x51\xb3\x0c\x41\xd5\x74\x80\x04\x0c\x52\x4e\xf0\x3e\x3a\xae\x4a\x55\xfe\x02\xaf\xc7\x4f\xf7\x68\x96\xe7\x5c\x16\x21\x29\x1d\xc3\xf5\x95\xde\x7d\x1a\x54\xa7\x8a\x48\x89\xee\x8a\xb7\x49\x1b\xc0\x6a\x8b\xe6\x85\x4a\x2e\x0b\x48\x6b\x02\x2a\x11\xfe\xae\x45\xaa\xc8\x28\x09\x05\x92\x05\xcb\x73\x04\xab\x59\xe6\xd6\x6c\x94\x01\xa1\x52\x5e\x21\x6c\xb8\xb1\x04\x5b\x8e\xcf\xb6\x0d\x77\xea\xf2\x8d\xe6\xa7\x93\x40\x30\xf3\x84\xc4\x65\xd1\x92\x6d\x94\x22\x34\x23\x61\x19\x5e\x94\x14\xc3\xec\xe3\x58\x60\x15\x6e\x7a\xfa\xf3\xb0\xbe\xd4\x96\x94\x00\xcd\x0a\x04\x0f\x68\x00\xe3\x88\xfb\x61\xda\x7c\x2a\x4c\x8e\xe6\xb8\x60\xa6\x77\x60\x55\xc5\x73\x78\x87\x1f\xdd\xaf\x8d\xa6\x05\xe6\x9e\x3d\x61\xc3\xac\x60\x96\x9c\xeb\x06\x92\xa3\xd3\x09\x2d\x13\x0e\xa3\x8b\x19\x98\x6d\x44\x92\x6d\x79\xc1\x5c\x89\x0f\xa1\x2e\x3f\x74\x80\x0b\x66\x0a\x2e\x7d\x35\x5c\x7d\x1a\x52\x1d\x10\x77\xb4\x15\x97\x18\x7a\xd7\x31\xcc\x2f\x54\x49\x9b\xce\x7d\xea\xda\xc0\x2e\x66\xb3\x81\x35\xfb\xa5\xcb\x65\xa6\x2a\x65\x62\x78\x77\x73\x73\x33\x48\xb2\x37\xbb\xc4\x70\x1f\x20\xff\x8e\x4d\x1f\x31\x2e\xcf\x11\xfe\x2a\x30\xe7\x0c\xfe\x2f\xb8\x0c\x9f\x79\x4e\x65\x0c\x37\x3f\xdf\xea\xdd\x0f\x1d\xcc\xd3\x93\xf5\xb9\xc2\x73\xb9\x3b\x1a\x7f\xe8\xd5\xc6\xdb\x40\xee\x4f\xdb\x85\x92\x19\xa3\x9e\x61\x09\x65\x77\x6b\x9f\xa2\x18\xdc\x96\xed\x04\x9d\x07\x78\xcf\xb8\x84\x63\x27\x81\x40\x6b\x5d\x32\x98\xcc\xc1\xf2\x42\x42\xad\x5d\xff\x52\xa7\x62\x4e\xad\x7c\xee\x93\x70\x47\x21\xab\x78\x21\x63\xc8\x50\x12\x9a\xff\x5e\xe8\x2d\x67\xd3\x94\xba\x1e\xf7\xd5\x10\xc3\x6c\xae\x77\x70\x3d\xef\xd2\xb7\x51\x92\x42\xcb\xbf\x63\x0c\xd7\xb3\xf1\x42\x7c\xac\xb5\x56\xc6\x53\x70\x24\xe3\x30\x3a\xdb\x91\x9f\xb4\xc3\x6c\xcf\x7b\x6c\x0f\x98\x6a\xf8\x11\xca\xf9\x85\x6e\xbb\xbe\x1d\x87\xfa\x80\x56\x2b\x69\xf9\x16\x63\xf8\xa6\x0c\x19\xc6\x09\x88\xa5\x95\x1b\xaa\x2e\x6f\xb5\x1e\x28\x51\x9b\x19\x44\xd9\xe8\xff\xb5\x5a\x1b\x27\x42\x6d\xfd\x70\xd9\x33\x0c\xcf\x08\x16\x09\x90\x99\x8a\x9f\x77\x01\x0c\x8d\x67\x18\x19\xd1\x30\xda\xd8\xd0\x1f\xd5\x9d\xb9\x02\xbd\x59\x7d\x35\xd6\x2c\xd0\x3d\x07\xcf\xe6\xe4\x30\xf8\xc1\xde\x3c\x9b\x73\x97\xda\xb3\xcf\x9c\xb7\xda\x17\x3d\x28\xd9\x39\x05\xdd\x99\xb7\xe5\xb6\x66\x15\xe0\x66\x83\x19\xf5\x60\x8d\xb5\x19\xf4\x5b\x69\x94\x08\xff\x96\x44\xfb\x3b\x42\x12\xf9\x7b\xd3\x24\x71\xe7\xff\xfe\xfe\x90\xf3\x2d\x64\x15\xb3\x76\x11\x1c\x27\x4b\x70\xba\x4f\x24\x58\xa1\x40\x49\xcb\xd7\x57\x98\x3e\xd6\xe9\xca\x7f\xc2\xdb\x5b\x12\x1d\x54\x7b\x2f\x39\xdf\x3a\x1f\x7e\xef\x24\xf2\x77\xb7\x7f\x02\x00\x00\xff\xff\xf2\xca\x8f\x12\xcc\x09\x00\x00")

func templatesTemplateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplateHtml,
		"templates/template.html",
	)
}

func templatesTemplateHtml() (*asset, error) {
	bytes, err := templatesTemplateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template.html", size: 2508, mode: os.FileMode(420), modTime: time.Unix(1476655674, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/template.html": templatesTemplateHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"template.html": &bintree{templatesTemplateHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

