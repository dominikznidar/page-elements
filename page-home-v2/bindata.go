// Code generated by go-bindata.
// sources:
// templates/template.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesTemplateHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x91\xb1\x8e\x14\x31\x0c\x86\x6b\xf6\x29\xac\xa9\xd9\x1b\x1d\xb4\xb3\x53\xd0\x40\x83\x44\x81\x44\xed\x49\xfe\x9d\xc9\x6d\x62\x47\x8e\xb3\xe8\xde\x1e\xcd\xea\x06\x8e\x2a\x8a\x65\xff\xfe\xe4\x6f\x42\x46\x81\xf8\xbc\x81\x23\x6c\x1a\x8f\xff\xe9\x34\xc5\x74\xa7\x90\xb9\xb5\xcb\xf0\xd2\xcb\xa2\x6e\x2a\xc3\x7c\xfa\x30\x6d\xcf\x47\x3d\xa6\x56\x33\xbf\x9e\x3f\x0f\xf3\x2f\xe4\xa0\x05\xe4\x4a\x9f\x24\xd2\xf7\x14\x4c\xe9\xdb\x5e\xf9\xc1\x2b\xa6\x71\x7b\xde\x47\xeb\x31\x99\xc1\x71\x98\xbf\x70\x50\xa1\x54\x5b\x2f\x14\x35\xab\x11\x17\x38\x2d\xdd\xd6\xa8\xeb\x0a\xa1\xf6\x3b\x09\xa8\x6d\x2c\x37\xca\x2c\xf1\x85\xb1\xc2\x3e\xd2\x0d\xf7\x24\xd4\xdc\x52\xa5\xe6\xe0\x1b\xf9\x79\x51\x01\x55\x96\x00\x77\x26\x4b\x0b\x5e\x41\x35\xad\x14\x55\x60\x14\xb6\x14\x6e\x7b\x24\xf7\xc6\x2b\x9e\xe8\x27\x24\xc2\xb2\x26\xa1\xa0\x26\x88\xb4\x00\x57\x8a\xd6\x4b\xf3\x14\x6e\xc4\x39\xb0\x1b\xbf\xad\xdf\xb8\xec\x60\x30\x6a\x9b\xf6\x1c\x61\x64\xbd\xd4\x37\xc4\x6a\xda\x42\xea\xee\xfa\x0f\xe1\x9a\x32\x9c\x4a\x5a\x45\xe5\x1d\xfd\xd3\x34\xd6\xc7\x31\xe6\x89\x8f\x7b\x2c\x2e\xb4\xb8\x9c\xf3\xfa\x78\x5a\x0f\x01\xad\x0d\xb4\x19\xae\x97\x61\x6c\x7d\x19\xc8\x34\xe3\x32\x2c\xfb\x0e\x19\xe6\xaf\x7b\xb4\x1a\x28\xc2\x39\xe5\x36\x8d\x3c\x3f\x82\xa7\x31\xa6\xfb\x2e\xf0\x70\x69\x08\x5a\x0a\x24\xb2\x27\x95\xf6\x4e\xf2\xdf\x96\xab\xaa\xff\xa7\xff\x4f\x00\x00\x00\xff\xff\xba\xce\x11\x7f\x19\x02\x00\x00")

func templatesTemplateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTemplateHtml,
		"templates/template.html",
	)
}

func templatesTemplateHtml() (*asset, error) {
	bytes, err := templatesTemplateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/template.html", size: 537, mode: os.FileMode(420), modTime: time.Unix(1476531483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/template.html": templatesTemplateHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"template.html": &bintree{templatesTemplateHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

