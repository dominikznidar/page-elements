// Code generated by protoc-gen-go.
// source: common.proto
// DO NOT EDIT!

/*
Package specs is a generated protocol buffer package.

It is generated from these files:
	common.proto

It has these top-level messages:
	PageElementDescription
	PageElementIncludes
	RenderArgs
	RenderArg
	Empty
	PageRender
	StaticAsset
	Meta
*/
package specs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StaticAsset_Type int32

const (
	StaticAsset_JS  StaticAsset_Type = 0
	StaticAsset_CSS StaticAsset_Type = 1
)

var StaticAsset_Type_name = map[int32]string{
	0: "JS",
	1: "CSS",
}
var StaticAsset_Type_value = map[string]int32{
	"JS":  0,
	"CSS": 1,
}

func (x StaticAsset_Type) String() string {
	return proto.EnumName(StaticAsset_Type_name, int32(x))
}
func (StaticAsset_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

type PageElementDescription struct {
	Name     string                 `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Version  string                 `protobuf:"bytes,2,opt,name=Version" json:"Version,omitempty"`
	Includes []*PageElementIncludes `protobuf:"bytes,3,rep,name=Includes" json:"Includes,omitempty"`
}

func (m *PageElementDescription) Reset()                    { *m = PageElementDescription{} }
func (m *PageElementDescription) String() string            { return proto.CompactTextString(m) }
func (*PageElementDescription) ProtoMessage()               {}
func (*PageElementDescription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PageElementDescription) GetIncludes() []*PageElementIncludes {
	if m != nil {
		return m.Includes
	}
	return nil
}

type PageElementIncludes struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
}

func (m *PageElementIncludes) Reset()                    { *m = PageElementIncludes{} }
func (m *PageElementIncludes) String() string            { return proto.CompactTextString(m) }
func (*PageElementIncludes) ProtoMessage()               {}
func (*PageElementIncludes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type RenderArgs struct {
	Args map[string]*RenderArg `protobuf:"bytes,1,rep,name=args" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RenderArgs) Reset()                    { *m = RenderArgs{} }
func (m *RenderArgs) String() string            { return proto.CompactTextString(m) }
func (*RenderArgs) ProtoMessage()               {}
func (*RenderArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RenderArgs) GetArgs() map[string]*RenderArg {
	if m != nil {
		return m.Args
	}
	return nil
}

type RenderArg struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *RenderArg) Reset()                    { *m = RenderArg{} }
func (m *RenderArg) String() string            { return proto.CompactTextString(m) }
func (*RenderArg) ProtoMessage()               {}
func (*RenderArg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type PageRender struct {
	Html      string         `protobuf:"bytes,1,opt,name=html" json:"html,omitempty"`
	Assets    []*StaticAsset `protobuf:"bytes,2,rep,name=assets" json:"assets,omitempty"`
	Meta      []*Meta        `protobuf:"bytes,3,rep,name=meta" json:"meta,omitempty"`
	PageTitle string         `protobuf:"bytes,4,opt,name=pageTitle" json:"pageTitle,omitempty"`
}

func (m *PageRender) Reset()                    { *m = PageRender{} }
func (m *PageRender) String() string            { return proto.CompactTextString(m) }
func (*PageRender) ProtoMessage()               {}
func (*PageRender) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PageRender) GetAssets() []*StaticAsset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *PageRender) GetMeta() []*Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type StaticAsset struct {
	Type StaticAsset_Type `protobuf:"varint,1,opt,name=type,enum=specs.StaticAsset_Type" json:"type,omitempty"`
	Path string           `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *StaticAsset) Reset()                    { *m = StaticAsset{} }
func (m *StaticAsset) String() string            { return proto.CompactTextString(m) }
func (*StaticAsset) ProtoMessage()               {}
func (*StaticAsset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Meta struct {
	Name      string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Content   string `protobuf:"bytes,2,opt,name=Content" json:"Content,omitempty"`
	HttpEquiv string `protobuf:"bytes,3,opt,name=HttpEquiv" json:"HttpEquiv,omitempty"`
}

func (m *Meta) Reset()                    { *m = Meta{} }
func (m *Meta) String() string            { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()               {}
func (*Meta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*PageElementDescription)(nil), "specs.PageElementDescription")
	proto.RegisterType((*PageElementIncludes)(nil), "specs.PageElementIncludes")
	proto.RegisterType((*RenderArgs)(nil), "specs.RenderArgs")
	proto.RegisterType((*RenderArg)(nil), "specs.RenderArg")
	proto.RegisterType((*Empty)(nil), "specs.Empty")
	proto.RegisterType((*PageRender)(nil), "specs.PageRender")
	proto.RegisterType((*StaticAsset)(nil), "specs.StaticAsset")
	proto.RegisterType((*Meta)(nil), "specs.Meta")
	proto.RegisterEnum("specs.StaticAsset_Type", StaticAsset_Type_name, StaticAsset_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for PageElement service

type PageElementClient interface {
	Describe(ctx context.Context, in *RenderArgs, opts ...grpc.CallOption) (*PageElementDescription, error)
	Render(ctx context.Context, in *RenderArgs, opts ...grpc.CallOption) (*PageRender, error)
}

type pageElementClient struct {
	cc *grpc.ClientConn
}

func NewPageElementClient(cc *grpc.ClientConn) PageElementClient {
	return &pageElementClient{cc}
}

func (c *pageElementClient) Describe(ctx context.Context, in *RenderArgs, opts ...grpc.CallOption) (*PageElementDescription, error) {
	out := new(PageElementDescription)
	err := grpc.Invoke(ctx, "/specs.PageElement/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageElementClient) Render(ctx context.Context, in *RenderArgs, opts ...grpc.CallOption) (*PageRender, error) {
	out := new(PageRender)
	err := grpc.Invoke(ctx, "/specs.PageElement/Render", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PageElement service

type PageElementServer interface {
	Describe(context.Context, *RenderArgs) (*PageElementDescription, error)
	Render(context.Context, *RenderArgs) (*PageRender, error)
}

func RegisterPageElementServer(s *grpc.Server, srv PageElementServer) {
	s.RegisterService(&_PageElement_serviceDesc, srv)
}

func _PageElement_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageElementServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/specs.PageElement/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageElementServer).Describe(ctx, req.(*RenderArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageElement_Render_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageElementServer).Render(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/specs.PageElement/Render",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageElementServer).Render(ctx, req.(*RenderArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _PageElement_serviceDesc = grpc.ServiceDesc{
	ServiceName: "specs.PageElement",
	HandlerType: (*PageElementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Describe",
			Handler:    _PageElement_Describe_Handler,
		},
		{
			MethodName: "Render",
			Handler:    _PageElement_Render_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("common.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x53, 0xdf, 0x6b, 0xd4, 0x40,
	0x10, 0x36, 0x97, 0x5c, 0xae, 0x99, 0x88, 0x5c, 0x47, 0x68, 0xc3, 0xa9, 0x58, 0x22, 0x48, 0x55,
	0x88, 0x70, 0x82, 0x88, 0xf8, 0x52, 0xea, 0x81, 0x15, 0x14, 0xd9, 0x2b, 0xbe, 0x6f, 0xd3, 0x21,
	0x0d, 0xe6, 0x97, 0xd9, 0xb9, 0x42, 0x10, 0x7c, 0x16, 0xfc, 0xa7, 0x65, 0x37, 0x7b, 0x77, 0xc1,
	0xbb, 0xbe, 0x84, 0xd9, 0x6f, 0xbe, 0x99, 0x6f, 0x66, 0xf7, 0x0b, 0xdc, 0x4f, 0xeb, 0xb2, 0xac,
	0xab, 0xa4, 0x69, 0x6b, 0xae, 0x71, 0xac, 0x1a, 0x4a, 0x55, 0xfc, 0x1b, 0x8e, 0xbe, 0xc9, 0x8c,
	0x16, 0x05, 0x95, 0x54, 0xf1, 0x47, 0x52, 0x69, 0x9b, 0x37, 0x9c, 0xd7, 0x15, 0x22, 0x78, 0x5f,
	0x65, 0x49, 0x91, 0x73, 0xe2, 0x9c, 0x06, 0xc2, 0xc4, 0x18, 0xc1, 0xe4, 0x3b, 0xb5, 0x2a, 0xaf,
	0xab, 0x68, 0x64, 0xe0, 0xf5, 0x11, 0xdf, 0xc2, 0xc1, 0x45, 0x95, 0x16, 0xab, 0x6b, 0x52, 0x91,
	0x7b, 0xe2, 0x9e, 0x86, 0xf3, 0x59, 0x62, 0x14, 0x92, 0x41, 0xfb, 0x35, 0x43, 0x6c, 0xb8, 0xf1,
	0x0b, 0x78, 0xb8, 0x87, 0xb0, 0x4f, 0x3c, 0xfe, 0xe3, 0x00, 0x08, 0xaa, 0xae, 0xa9, 0x3d, 0x6b,
	0x33, 0x85, 0xaf, 0xc1, 0x93, 0x6d, 0xa6, 0x22, 0xc7, 0xa8, 0x3d, 0xb2, 0x6a, 0x5b, 0x42, 0xa2,
	0x3f, 0x8b, 0x8a, 0xdb, 0x4e, 0x18, 0xe2, 0xec, 0x02, 0x82, 0x0d, 0x84, 0x53, 0x70, 0x7f, 0x50,
	0x67, 0xfb, 0xeb, 0x10, 0x9f, 0xc3, 0xf8, 0x56, 0x16, 0x2b, 0x32, 0x9b, 0x85, 0xf3, 0xe9, 0xff,
	0x0d, 0x45, 0x9f, 0x7e, 0x3f, 0x7a, 0xe7, 0xc4, 0xcf, 0x20, 0xd8, 0xe0, 0x78, 0x04, 0xbe, 0xc9,
	0xf4, 0xa3, 0x04, 0xc2, 0x9e, 0xe2, 0x09, 0x8c, 0x17, 0x65, 0xc3, 0x5d, 0xfc, 0xd7, 0x01, 0xd0,
	0x4b, 0xf6, 0x25, 0x7a, 0xb7, 0x1b, 0x2e, 0x8b, 0xf5, 0x6e, 0x3a, 0xc6, 0x97, 0xe0, 0x4b, 0xa5,
	0x88, 0x55, 0x34, 0x32, 0xeb, 0xa0, 0x55, 0x5f, 0xb2, 0xe4, 0x3c, 0x3d, 0xd3, 0x29, 0x61, 0x19,
	0xf8, 0x14, 0xbc, 0x92, 0x58, 0xda, 0x6b, 0x0e, 0x2d, 0xf3, 0x0b, 0xb1, 0x14, 0x26, 0x81, 0x8f,
	0x21, 0x68, 0x64, 0x46, 0x97, 0x39, 0x17, 0x14, 0x79, 0x46, 0x65, 0x0b, 0xc4, 0x19, 0x84, 0x83,
	0xae, 0xf8, 0x0a, 0x3c, 0xee, 0x9a, 0xfe, 0xa6, 0x1f, 0xcc, 0x8f, 0x77, 0x75, 0x93, 0xcb, 0xae,
	0x21, 0x61, 0x48, 0x7a, 0xf4, 0x46, 0xf2, 0x8d, 0x7d, 0x7c, 0x13, 0xc7, 0xc7, 0xe0, 0x69, 0x06,
	0xfa, 0x30, 0xfa, 0xbc, 0x9c, 0xde, 0xc3, 0x09, 0xb8, 0xe7, 0xcb, 0xe5, 0xd4, 0x89, 0x05, 0x78,
	0x7a, 0xa8, 0xbb, 0x8c, 0x74, 0x5e, 0x57, 0x4c, 0x15, 0xaf, 0x8d, 0x64, 0x8f, 0x7a, 0xf8, 0x4f,
	0xcc, 0xcd, 0xe2, 0xe7, 0x2a, 0xbf, 0x8d, 0xdc, 0x7e, 0xf8, 0x0d, 0x30, 0xff, 0x05, 0xe1, 0xc0,
	0x2e, 0xf8, 0x01, 0x0e, 0x7a, 0xcb, 0x5e, 0x11, 0x1e, 0xee, 0x38, 0x60, 0xf6, 0x64, 0xd7, 0x82,
	0x43, 0x87, 0x27, 0xe0, 0xdb, 0x27, 0xd9, 0x53, 0x7b, 0x38, 0xa8, 0xed, 0xe1, 0x2b, 0xdf, 0xfc,
	0x39, 0x6f, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x97, 0xb1, 0xa7, 0x49, 0x03, 0x00, 0x00,
}
